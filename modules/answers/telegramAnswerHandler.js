const { Markup } = require("telegraf");
const messages = require('../templates/messages');

function findRates(data, symbol, isFiat) {

  if (isFiat) {
    const resp = data.find((item) => item.symbol === symbol);
    const price = (1 / resp.rate).toFixed(2);
    return price;
  } else {
    const resp = data.find((item) => item.symbol === symbol);
    const price = (1 * resp.rate).toFixed(2);
    return price;
  }

}

module.exports = {

  randerCryptocurrency: async (ctx, data) => {
    try {
      const stringAnswer =
      `‚úÖ  <b>${data.name}</b>`+
      `\n–°–∏–º–≤–æ–ª: ${data.symbol}`+
      `\n–†–∞–Ω–≥: ${data.rank}`+
      `\n–¶–µ–Ω–∞: ${(1 * data.priceUsd).toFixed(2)}`+
      `\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${(1 * data.change).toFixed(2)}%`+
      `\nR–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è ${(1 * data.capitalization).toFixed(0)}`;
      ctx.replyWithHTML(stringAnswer, Markup.inlineKeyboard([[
      Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂—ã—Ç—å', 'repeat'),
      Markup.button.callback('–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'exit'),
      ]]));
    } catch (e) {
      console.log('Render cryptocurrencyItem error', e);
      await ctx.reply(messages.defaultError);
    }


  },

  reanderOneCoin: async (ctx, data) => {

    try {
      const stringAnswer =
      `‚úÖ  –ù–∞–∑–≤–∞–Ω–∏–µ: ${data.id}`+
      `\n–°–∏–º–≤–æ–ª: ${data.symbol}`+
      `\n–¶–µ–Ω–∞: 1USD => ${(1 / data.rate).toFixed(2)} ${data.symbol}`;
      await ctx.reply(stringAnswer, Markup.inlineKeyboard([[
      Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂—ã—Ç—å', 'repeat'),
      Markup.button.callback('–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'exit'),
      ]]));
    } catch (e) {
      console.log('Render rateItem error', e);
      await ctx.reply(messages.defaultError);
    }

  },

  randerTotalRates: async (ctx, data) => {

    try {
      const stringAnswer =
        `<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> \n\n<b>–í–∞–ª—é—Ç—ã</b>`+
        `\n–ì—Ä–∏–≤–Ω—è üá∫üá¶: 1USD = ${findRates(data, 'UAH', true)} UAH`+
        `\n–†—É–±–ª—å üá∑üá∫: 1USD = ${findRates(data, 'RUB', true)} RUB`+
        `\n–ï–≤—Ä–æ: üá™üá∫: 1USD = ${findRates(data, 'EUR', true)} EUR`+
        `\n\n<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Ü–µ–Ω—ã –≤ USD</b>`+
        `\n–ë–∏—Ç–∫–æ–∏–Ω: 1BTC = ${findRates(data, 'BTC', false)}`+
        `\n–ï—Ñ–∏—Ä–∏—É–º: 1ETH = ${findRates(data, 'ETH', false)}`+
        `\n–õ–∞–π—Ç–∫–æ–∏–Ω: 1LTC = ${findRates(data, 'LTC', false)}`+
        `\n\n<b>–ú–µ—Ç–∞–ª—ã</b>`+
        `\n–ó–æ–ª–æ—Ç–æ: 1XAU = ${findRates(data, 'XAU', false)}`+
        `\n–°–µ—Ä–µ–±—Ä–æ: 1XAG = ${findRates(data, 'XAG', false)}`
      await ctx.replyWithHTML(stringAnswer);
    } catch (e) {
      console.log('Render totalInfo error', e);
      await ctx.reply(messages.defaultError);
    }


  }
}